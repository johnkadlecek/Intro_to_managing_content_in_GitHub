## What is the difference between push, pull, and fetch?

- `git push` - sends changes from a local branch to a remote repo

- `git pull` -  gets changes from a remote branch into your tracking branch and merges them into a local branch

- `git fetch` - gets changes from a remote repo into your tracking branch

After you have cloned a repository, you can use `git push` to take the current branch, and check whether or not a tracking branch for a remote repository is connected to it. If so, your changes are taken from the current branch and pushed to the remote branch. This updates the remote repository and is how you can share your code changes with your colleagues. 

You can think of it as "make the remote branch match your local branch". A push fails if the remote branch has diverged from your local branch. If not all the commits in the remote branch are in your local branch a failure occurs. When this happens, your local branch needs to be synchronized with the remote branch with git pull or git fetch and git merge.

Often `git fetch` and `git pull` are similar but not equivalent. Under the hood `git pull` does two things: `git fetch` followed immediately by `git merge`. 

`git fetch` takes your current branch, and checks to see if there is a tracking branch. If so, it looks for changes in the remote branch, and pulls them into the tracking branch. It does not change your local branch.  'git pull' does a fetch and also updates your local branch with any changes it finds in the remote repository. 

You might prefer to use 'git fetch' followed by 'git merge' to make sure you understand the changes being merged into the branch before the merge happens. To do that, do the 'git merge' from origin/master ('git merge origin/master`) when you want to merge changes from the master branch into your local branch.

